# Создание таблиц

CREATE TABLE Genres
(
    genre_id serial primary key,
    genre_name VARCHAR(60) not null unique
);

CREATE TABLE Artists
(
    artist_id serial primary key,
    artist_name VARCHAR(60) not null
);

CREATE TABLE Genres_Artists
(
    genre_id INT not null references Genres(genre_id),
    artist_id INT not null references Artists(artist_id),
    primary key(genre_id, artist_id)
);

CREATE TABLE Albums
(
    album_id serial primary key,
    album_name VARCHAR(60) not null,
    release_year DATE check (DATE >= '1960-01-01')
);

CREATE TABLE Album_Artist
(
    album_id INT not null references Albums(album_id),
    artist_id INT not null references Artists(artist_id),
    primary key(album_id, artist_id)
);

CREATE TABLE Compilation
(
    compilation_id serial primary key,
    compilation_name VARCHAR(60) not null unique,
    release_year DATE check (DATE >= '1960-01-01')
);

CREATE TABLE Tracks
(
    track_id serial primary key,
    track_name VARCHAR(60) not null unique,
    duration integer check (integer <= '00-10-00'),
    album_id INT not null references Albums(album_id)
);

CREATE TABLE Compilation_Tracks
(
    compilation_id INT not null references Compilation(compilation_id),
    track_id INT not null references Tracks(track_id),
    primary key(compilation_id, track_id)
);

# Задание №1

# Заполнение таблиц

# не менее 4 исполнителей,
# не менее 3 жанров,
# не менее 3 альбомов,
# не менее 6 треков,
# не менее 4 сборников.

INSERT INTO genres (genre_name) VALUES
    ('Rock'),
    ('Heavy Metal'),
    ('Hardcore');

INSERT INTO artists (artist_name, genre_id)
VALUES
    ('Jimi Hendrix', 1),
    ('AC/DC', 1),
    ('Metallica', 2),
    ('Agnostic Front', 3);

INSERT INTO albums (album_name, release_year, artist_id)
VALUES 
  ('Are You Experienced', '2019', 1),
  ('Back in Black', '2020', 2),
  ('Master of Puppets', '2019', 3),
  ('Warriors', '2007', 4);

INSERT INTO tracks (track_name, duration, album_id)
VALUES 
    ('Purple Haze', '00:02:50', 1),
    ('Hells Bells', '00:05:10', 2),
    ('Nothing Else Matters', '00:06:29', 3),
    ('Enter Sandman', '00:05:29', 3),
    ('Addiction', '00:02:20', 4),
    ('For my family', '00:02:22', 4);

INSERT INTO compilation (compilation_name, release_year)
VALUES
    ('Experience Hendrix: The Best of Jimi Hendrix', '2019-03-04'),
    ('High Voltage', '1976-02-07'),
    ('Metallica: The Black Album', '1991-05-04'),
    ('Raw Unleashed', '2001-05-02');
   
 # Задание №2

# Написать SELECT-запросы, которые выведут информацию согласно инструкциям ниже.

# Название и продолжительность самого длительного трека.
# Название треков, продолжительность которых не менее 3,5 минут.
# Названия сборников, вышедших в период с 2018 по 2020 год включительно.
# Исполнители, чьё имя состоит из одного слова.
# Название треков, которые содержат слово «мой» или «my».


select track_name as name, max(duration) as max_duration
from tracks;

select track_name as name, duration
from tracks
where duration >= '00:03:30'

select compilation_name as name
from compilation
where release_year between 2018 and 2020

select artist_name as name 
from artists
where artist_name like '%'

select track_name as name
from tracks
where track_name like '%my%'

# Задание №3

# Написать SELECT-запросы, которые выведут информацию согласно инструкциям ниже.

# Количество исполнителей в каждом жанре.
# Количество треков, вошедших в альбомы 2019–2020 годов.
# Средняя продолжительность треков по каждому альбому.
# Все исполнители, которые не выпустили альбомы в 2020 году.
# Названия сборников, в которых присутствует конкретный исполнитель (выберите его сами).


SELECT g.genre_name AS genre, COUNT(a.artist_id) AS NumberOfArtists
FROM genres g
LEFT JOIN artists a ON g.genre_id = a.genre_id
GROUP BY g.genre_name
ORDER BY NumberOfArtists DESC;

select count(t.track_id) as tracks_quantity
from tracks t 
left join albums a on t.album_id  = a.album_id 
where a.release_year = '2019' or a.release_year = '2020'

SELECT a.album_name, AVG(EXTRACT(EPOCH FROM t.duration)) AS average_duration
FROM albums a
LEFT JOIN tracks t ON a.album_id = t.album_id
GROUP BY a.album_name
ORDER BY a.album_name;

SELECT artist_name
FROM artists
WHERE artist_id NOT IN (
    SELECT artist_id
    FROM albums
    WHERE release_year = '2020'
);

SELECT c.compilation_name
FROM compilation c
INNER JOIN compilation_artists ca ON c.compilation_id = ca.compilation_id
WHERE ca.artist_name = 'Agnostic Front';



